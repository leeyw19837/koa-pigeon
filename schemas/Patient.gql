type Patient {
  _id: ID
  nickname: String
  username: String
  gender: String
  dateOfBirth: String
  diabetesType: String
  startOfIllness: String
  avatar: String
  needleChatRoom: NeedleChatRoom
  footAssessmentPhotos: [Photo]
  closestAppointment: Appointment
  communications: [Communication]
  height: String
  weight: String
  targetWeight: String
  idCard: String
  createdAt: Date
  preYearApTime: Date
  patientState: String
  archivedReason: String
  district: String
  caseRecords(limit: Int): [CaseRecord]
  remarks: String
  soaps: [SOAP]
  outHospitalSoaps: [SOAP]
  healthCareTeam: [HealthCareTeam]
  healthCareTeamId: [String]
  institutionId: String
  appointments: [Appointment]
  lastAppointment: Appointment
  lastCheckAppointment: Appointment
  useIGluco: Boolean
  useNeedle: Boolean
  isUseBg1: Boolean
  notUseBg1Reason: String
  notUseAppReason: String
  deviceContext: DeviceContext
  oneWeekNotMeasure:[OneWeekNotMeasure]
  useSPT: Boolean
  usePublicNumber: Boolean
  isLiDocter: Boolean
  tempFilter: Boolean
  lastHbAlc: String
  bloodGlucoses(startAt: Date, endAt: Date, limit: Int): [BloodGlucoseRecord]
  bloodGlucosesByTime(selectTime: Date): [BloodGlucoseRecord]
  cdeInfo: CertifiedDiabetesEducator
  doctorInfo: User
  # 模组完成度
  MCR: Int
  clinicalLabResults: [ClinicalLabResult!]
  yearServiceOrder: Order
  yearServiceStatus(platform: String): Boolean
  achievements: [Achievement]
  achievementRecords(achievementId: ID): [AchievementRecord]
  achievementResult(achievementId: ID): [AchievementResult]
  achievementShownRecords: [AchievementRecord]
  bonusPoints: [BonusPoint!]
  # 模组（Needle/健康模块/自测要求/自测方案）
  selfTestSchemes: SelfTestSchemes
  # 控糖目标（Needle/健康模块/自测要求/控糖目标）
  sugarControlGoals: CaseRecord
  # 用户基本信息（Needle/健康模块/基本信息）
  healthInformation: HealthInformation
  predictionA1c: String
  availableAppointmentDates: [Outpatient!]
  hospitalCde: HospitalCde
  membershipInformation: MembershipInformation
  archivedInfos: [ArchivedInfos]
  reapplyStatus: ReapplyStatus
  chatRoomInfos: BasicChatRoomInfos
  BG1NotUseReason: [BG1NotUseReason]!
  nextAppointmentTime(appointmentTime: Date): String
  lastSOAP(appointmentTime: Date): SOAP
}

type MembershipInformation {
  # 会员类型（买的什么会员产品）
  type: MembershipType
  # 会员到期时间
  serviceEndTime: Date
  # 最近一次支付方式
  methodOfPayment: MethodOfPayment
}

type ArchivedInfos {
  # 归档类型
  archivedType: ArchivedType
  # 归档二级类型
  archivedSubType: [String]
  # 补充说明
  archivedReason: String
  # 归档时间
  archivedDate: [Date]
}

type OneWeekNotMeasure {
  hadNoMeasureReason:String
  createdAt:Date!
  custimizedReason:String
}

input ArchivedInfoMutation {
  # 归档类型
  archivedType: ArchivedType
  # 归档二级类型
  archivedSubType: [String]
  # 补充说明
  archivedReason: String
}

type BasicChatRoomInfos {
  _id: ID
  participants: [Participants]
  lastSeenAt: Date
}

type Participants {
  userId: ID
  role: String
}

enum ArchivedType {
  # 直接关闭问医生窗口
  INVALID_PATIENTS
  # 电话联系不上
  PHONECALL_UNAVAILABLE
  # 多次爽约
  BREAK_APPOINTMENTS
  # 患者自动退出
  QUIT_VOLUNTARILY
  # 潞河MMC患者
  MMC_PATIENTS
  # 反归档
  UNARCHIVED
}

enum ReapplyStatus {
  # 已申请
  APPLIED
  # 挂起
  PENDING
  # 未申请
  NOT_APPLIED
  # 被取消
  CANCELLED
}

enum Gender {
  male
  female
}

# 会员类型枚举（买的什么会员产品）
enum MembershipType {
  # 包年服务（线上服务+试纸）
  YEAR_SERVICE
  # 包年服务（线上服务）
  YEARLY_SERVICE_SERVICE_ONLY
  # 包季服务（线上服务）
  QUARTERLY_SERVICE_SERVICE_ONLY
  # 连续包季服务（线上服务）
  CONTINUOUS_QUARTERLY_SERVICE_SERVICE_ONLY
  # 实物商品
  ENTITY_GOODS
}

# 会员支付方式
enum MethodOfPayment {
  # 支付宝
  ALIPAY
  # 微信支付
  WECHAT
}

input ProfileInput {
  nickname: String
  gender: Gender
  height: Int
  weight: Int
  username: String
  remarks: String
}

input InputPatientFilter {
  cdeId: ID
  # part of nickname
  namePattern: String
  isRecentCLR: Boolean
  isContinuousNonMonitor: Boolean
}

input UserIdentificationInfos {
   idCard: String
   district: String
   districtId: String
   street: String
}

type PatientFilter {
  cdeId: ID
  # part of nickname
  namePattern: String
  isRecentCLR: Boolean
  isContinuousNonMonitor: Boolean
}

type NameCatalog {
  letter: String!
  index: Int!
}

type HospitalCde {
  cdeName: String
  cdeAvatar: String
  hospitalCdeName: String
  hospitalCdeAvatar: String
}

type PatientPagination {
  filter: PatientFilter
  slice: SliceInfo
  patients: [Patient!]
  catalog: [NameCatalog!]
  total: Int!
}
