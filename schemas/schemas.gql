scalar Date
scalar JSON

type Patient {
  nickname: String!
}

type Appointment {
  date: String!
  nickname: String!
}

# type TreatmentSt
enum VARIATION{
  NORMAL,
  ABNORMAL
}
enum MEDICAL_HISTORY{
  HAS,
  NOT_HAS
}
enum DEFORMITY{
  HAS,
  NOT_HAS
}

type History {
  recievedFootcareInstruction: Boolean
  livesAlone: Boolean
  hadFootUlcer: Boolean
  amputee: Boolean
}
type Skin {
  historyPresent: MEDICAL_HISTORY!
  # history: History!
}
type Bone {
  deformityPresent: DEFORMITY!
}

enum PULSE {
  NORMAL,
  WEAK,
  NO_PULSE,
}

type Blood {
  conclusion: String
  instepPulseLeft: PULSE!
  instepPulseRight: PULSE!
  ABILeft: Float
  ABIRight: Float
  TBILeft: Float
  TBIRight: Float
}

type NerveSymptoms {
  pain: Boolean
  numbness: Boolean
  paresthesia: Boolean
}

enum SENSITIVITY {
  NORMAL,
  NUMBNESS,
  PAIN,
}

type Nerve {
  symptomsPresent: Boolean
  symptoms: NerveSymptoms!

  pressureSenseLeft: Boolean
  pressureSenseRight: Boolean
  vibrationSenseLeft: Boolean
  vibrationSenseRight: Boolean
  temperatureSenseLeft: Boolean
  temperatureSenseRight: Boolean
  ankleReflexLeft: Boolean
  ankleReflexRight: Boolean

  leftArmSensitivity: SENSITIVITY
  rightArmSensitivity: SENSITIVITY
  leftLegSensitivity: SENSITIVITY
  rightLegSensitivity: SENSITIVITY

  hasDoneSomatesthesiaCheck: Boolean
  needsSomatesthesiaCheck: Boolean
}

type ShoeTypes {
  flipFlops: Boolean!
  crocs: Boolean!
  net: Boolean!
  flats: Boolean!
  mocassins: Boolean!
  dress: Boolean!
  lowHeel: Boolean!
  midHeel: Boolean!
  highHeel: Boolean!
  rain: Boolean!
  highHeel: Boolean!
  sandals: Boolean!
  football: Boolean!
  running: Boolean!
  hiking: Boolean!
}

type FootwearQuestions {
  question1: Boolean
  question2: Boolean
  question3: Boolean
  question4: Boolean
  question5: Boolean
  question6: Boolean
  question7: Boolean
  question8: Boolean
  question9: Boolean
  question10: Boolean
  question11: Boolean
  question12: Boolean
  question13: Boolean
  question14: Boolean
  question15: Boolean
}

type FootAssessment {
  id: ID!
  patient: Patient!
  skin: Skin!
  blood: Blood!
  nerve: Nerve!
  footwearQuestions: FootwearQuestions!
  footwearSelection: ShoeTypes!
}

type Query {
  appointments: [Appointment]
  patients: [Patient]
  footAssessments: [FootAssessment]
}

schema {
  query: Query
}