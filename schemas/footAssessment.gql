scalar Date
scalar JSON




# Primtives

enum VARIATION{
  NORMAL
  ABNORMAL
}


enum CONCLUSION {
  NORMAL
  EXCEPTION
}


type Temperature{
  value: Float
  unit: String!
}

# Page one history
enum MEDICAL_HISTORY{
  PRESENT
  NOT_PRESENT
}
type MedicalHistory {
  selected: MEDICAL_HISTORY
  history: History!
}
type History {
  recievedFootcareInstruction: Boolean
  livesAlone: Boolean
  hadFootUlcer: Boolean
  amputee: Boolean
}

# Page one skin conditions

type Skin {
  abnormalityPresent: Boolean
  abnormalities: Abnormalities!
  footTemperatures: FootTemperature!
}
type Abnormalities{
  discoloration: Boolean
  edema: Boolean
  flakySkin: Boolean
  blister: Boolean
  cracks: Boolean
  callus: Boolean
  ingrownToenail: Boolean
  athletesFoot: Boolean
  toenailFungus: Boolean
}
type FootTemperature {
  environment: Temperature
  left: Temperature
  right: Temperature
  leftMetatarsal: Temperature
  rightMetatarsal: Temperature
}

# Page two bones

type Bone {
  deformitiesLeftPresent: Boolean
  deformitiesLeft: Deformities!
  deformitiesRightPresent: Boolean
  deformitiesRight: Deformities!
  ankleJointLimitationLeftPresent: Boolean
  ankleJointLimitationRightPresent: Boolean
  ankleJointLimitationLeft: Limitation!
  ankleJointLimitationRight: Limitation!
  ballJointLimitationLeftPresent: Boolean
  ballJointLimitationRightPresent: Boolean
  ballJointLimitationLeft: Limitation!
  ankleJointLimitationRight: Limitation!
}
type Deformities {
  bunion: Boolean
  charcotFoot: Boolean
  hammertoe: Boolean
  clawToe: Boolean
  malletToe: Boolean
}
type Limitation {
  backStretch: Boolean
  plantarFlexion: Boolean
}

# Page three blood abnormalities
enum PULSE {
  NORMAL
  WEAK
  NO_PULSE
}
type Blood {
  symptomsPresent: Boolean
  symptoms: BloodSymptoms!
  conclusion: String
  instepPulseLeft: PULSE
  instepPulseRight: PULSE
  ABILeft: Float
  ABIRight: Float
  TBILeft: Float
  TBIRight: Float
}
type BloodSymptoms {
  restPain: Boolean
  intermittentClaudication: Boolean
}


# Page four nerves
enum SENSITIVITY {
  NORMAL
  NUMBNESS
  PAIN
}
type Nerve {
  symptomsPresent: Boolean
  symptoms: NerveSymptoms!

  pressureSenseLeft: Boolean
  pressureSenseRight: Boolean
  vibrationSenseLeft: Boolean
  vibrationSenseRight: Boolean
  temperatureSenseLeft: Boolean
  temperatureSenseRight: Boolean
  ankleReflexLeft: Boolean
  ankleReflexRight: Boolean

  leftArmSensitivity: SENSITIVITY
  rightArmSensitivity: SENSITIVITY
  leftLegSensitivity: SENSITIVITY
  rightLegSensitivity: SENSITIVITY

  hasDoneSomatesthesiaCheck: Boolean
  needsSomatesthesiaCheck: Boolean
}
type NerveSymptoms {
  pain: Boolean
  numbness: Boolean
  paresthesia: Boolean
}

# Page five shoe questions

# defaults to null as it means the question wasn't answered
type FootwearQuestions {
  question1: Boolean
  question2: Boolean
  question3: Boolean
  question4: Boolean
  question5: Boolean
  question6: Boolean
  question7: Boolean
  question8: Boolean
  question9: Boolean
  question10: Boolean
  question11: Boolean
  question12: Boolean
  question13: Boolean
  question14: Boolean
  question15: Boolean
}

# Page six preferred shoes

# defaults to false
type ShoeTypes {
  flipFlops: Boolean!
  crocs: Boolean!
  net: Boolean!
  flats: Boolean!
  mocassins: Boolean!
  dress: Boolean!
  lowHeel: Boolean!
  midHeel: Boolean!
  highHeel: Boolean!
  rain: Boolean!
  highHeel: Boolean!
  sandals: Boolean!
  football: Boolean!
  running: Boolean!
  hiking: Boolean!
}

type Event {
  _id: ID!
  type: String
  patientId: ID
  keypath: String!
}






type FootAssessment {
  _id: ID!
  patient: Patient!
  medicalHistory:MedicalHistory
  skin: Skin
  bone: Bone
  blood: Blood
  nerve: Nerve
  footwearQuestions: FootwearQuestions
  footwearSelection: ShoeTypes
}
input MedicalHistoryCheckboxInput {
  recievedFootcareInstruction: Boolean
  livesAlone: Boolean
  hadFootUlcer: Boolean
  amputee: Boolean
}
input MedicalHistoryRadioInput {
  historyPresent: Boolean
  history: MedicalHistoryCheckboxInput
}
input FootAssessmentInput {
  medicalHistory: MedicalHistoryRadioInput!
}
input EventInput {
  keypath:String!
  patientId:ID!
  type:String!
}