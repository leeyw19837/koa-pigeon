type Evaluate {
  _id: ID
  patientId: ID
  inValue: String
  nickname: String
  category: String
  a1cForecast: String
  a1cLatest: String
  measureCount: String
  doctors: String
  nextConsultationMin: String
  nextConsultationMax: String
  availableCategory: String
  categoryChange: String
  rangeChange: String
  a1cChange: String
  measureChange: String
}

type Flag {
  date: String
  desc: String
}

type PatientsFlag {
  nickname: String
  flag: [Flag]
  category: String
}

#
# type ForecaseDetail {
#   _id: ID
#   caclDay: String
#   actualDay: Date
#   inValue: Int
#   fcInValue: Int
#   a1cGood: Int
#   fcA1cGood: Int
#   inMgtPatients: Int
#   fcInMgtPatients: Int
#   a1cPercent: String
#   inMgtPercent: String
#   liAngPatients: Int
# }

type ForecaseDetail {
  inValue: Int
  a1cGood: Int
  a1cGoodPercent: String
  inMgt: Int
  inMgtPercent: String
  activePatient: Int
}

type CalcResult {
  type: String
  count: [Int]
  data: [Evaluate]
  children: [CalcItem]
}

type CalcItem {
  type: String
  count: [Int]
  diff: [diffData]
  children: [CalcItem]
}

type diffData {
  patientId: ID
  move: String
}

# type CalcChildren {
#   type: String
#   count: [Int]
#   children: [CalcChildren2]
# }

# type CalcChildren2 {
#   type: String
#   count: [Int]
#   children: {
#     type: String
#     count: [Int]
#   }
# }

extend type Query {
  fetchEvaluate(selectedDay: String!): [Evaluate]
  getPatientsFlag(selectedDay: String!): [PatientsFlag]
  getAllPatientsForCalc(firstDay: String, secondDay: String): CalcResult
  getOrderedDays: [String]
  fetchForecaseDetail(selectedDay: String): ForecaseDetail
  fetchMgtPatients(startAt: String, endAt: String): [Evaluate]
}
